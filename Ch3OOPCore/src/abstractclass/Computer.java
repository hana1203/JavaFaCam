package abstractclass;
/*
//Ch3-9 추상클래스 Abstract Class  구현하기
추상의 반대 구체적이다. 추상클래스의 반댓말? concrete 클래스
우리가 클래스 만들때 메서드를 구현한다.
메서드 선언하고 메서드의 반환값, 매개변수 쭉 쓰는것 - 메서드의 시그니처
메서드 쓰고 메서드 구현하는 {} 바디가 있다
메서드를 정의한다

메서드 선언한다?
메서드 반환값, 메서드 이름, 매게변수만 쓰는것
int add(int x, int y);
구현부가 없다. 추상메서드가 된다.
추상클래스?
추상메서드를 포함하는것
메서드를 선언한다는것? 큰 의미가 있다. 얘가 무슨일을 할지 개발자 머리에 없으면 선언할수가 없다.
얘가 무슨일을 할거라는게 머릿속에 없으면 선언할수없다.
인터페이스는 메서드 선언만으로 이뤄져있다. 메서드는 구현부가 없어서 추상메서드가 된다.
*/
/*
//추상 클래스를 왜 만드는가? 컴퓨터 클래스 예로 어떻게 끄고 켜는지 구현할수는 있는데
얘를 상속받는 하위클래스들이 display , typing 은 어떻게 할지는 컴퓨터는 모르는 것
공통으로 쓸 메서드는 구현을 해놓는데 자기가 이 클래스에서 구현하지 못하는 애들은 그냥 추상메서드로 놓는다
하위클래스에게 그 책임을 위임한다.
나는 구현하지 않을테니 상속받는 니들이 알아서 너한테 맞게 구현해라.
 */
public abstract class Computer {
    // 추상클래스는 상속을 위한 클래스
    // 두개 메서드는 구현부가 있고 두개는 구현부가 없다

    public abstract void display();
    public abstract void typing();
    public void turnOn() {
        System.out.println("전원켜기");
    }
    public void turnOff() {
        System.out.println("전원끄기");
    }

}
