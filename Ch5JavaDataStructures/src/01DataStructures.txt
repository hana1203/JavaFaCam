여러가지 자료구조

어떻게 자료를 메모리상에서 어떻게 관리해야 가장 효율적인가
자료의 구조에 따라 이런 경우에는 어떤 알고리즘을 쓰고 효율적인 자료구조가 효율적인 로직의 기반이 된다.
내가 개발하려는 프로그램에 가장 효율적인 알고리즘을 선택
시스템 유지보수, 수행 속도와 밀접한 관련
c++ stl 라이브러리에 자바 jdk 에 많이 구현되어있음
실질적으로 자료구조를 구현할 일은 없지만 뭐가있는지 알아야됨
배열 연결 리스트 스택 큐 는 구현할 것

선형 자료구조
한 줄로 자료 관리하기
앞 뒤 요소의 관계가 1:1 관계 cf. 트리구조 다대다

배열 ArrayList
중간이 비면 안됨
물리적인 순서와 논리적 순서가 동일
메모리상에도 1번 2번 중간에 끼워넣으면 엘리먼트 밀어놓고 중간에 꺼내면 당겨와야 함
물리적, 논리적 위치가 동일하기 떄문에 어느 위치에있는 연산이 굉장히 빠름
a[] = 0,1,2;
a[2] 에 대한 주소계산
10 + 4byte + 4bte = 18
주소 10이라고할때 index 연산에 의해 요소의 위치를 바로 꺼내옴

배열은 사용이전에 몇개인지 선언하고 들어감
물리적으로 몇개의 메모리를 쓰겠다고 정하고 그 사이즈만큼 할당받아서 쓰는게 배열
그리고 순서대로 엘리먼트를 집어넣는다

링크드리스트
노드가 필요할때 메모리를 얼로케이션 받아서 이미 이전 노드가있으면 다음것 추가할때 너의 뒤가 얘다하고 가리키는것
배열은 자료만 갖고있으면 되지만 링크드 리스트는 다음 엘리먼트를 가리킬 링크를 가지고있음
c, c++ 에서는 포인터
자바에서는 객체의 참조변수
처음부터 몇개 할당받는게 아니라 필요할때 다음게 들어가는것. 필요할때 하나씩
논리적,물리적 위치가 동일하지 않을 수있음
배열
반에 우선 30명의 의자를 둔다. 학생이 10명이든 20명이든
한줄로 쭉 앉기 1번다음에 2번앉고..
링크드리스트
전학오면 공간 빈곳에 책상 놓음
아무데나 앉아도 상관없음
그 대신 너가1번이고 2번이고 3번이야라고 지정하고 논리적으로 내 다음이 누구인지 기억
뒤에있는 애 기억하는것
df. 더블링크리스트 뒤에있는 애가 앞에있는 애 알고있는 것

하나의 엘리먼트가 추가될때?
배열의 경우 끼워들어온 애가 오면 다음애들 다 밀고 들어옴
책상갖고 오고 끼워들어온애 넌 이제 3번이고 원래 애 너는 4번이야 라고 순서를 바꿔줌
데이터가 추가, 삭제될때 배열보다 빠름
링크 연결만 수정하면 되서 자료 추가, 삭제 속도가 빠름

배열
자료를 추가 삭제에 드는 시간이 걸림
자료를 검색하거나 꺼내올떄 시간은 적게 든다 위치를 알경우
링크드리스트
자료를 조정하는 시간은 적게 걸리지만
몇번째 자료의 그 위치를 찾는 시간은 더 많이 걸린다. 몇번째 이다.

스택
책을 바닥에서부터 쌓아놓는 것
자료가 추가되고 삭제되는 일이 맨 꼭대기 top 에서만 일어남
가장 나중에 들어간 요소가 가장 먼저 나옴 FILO
지역변수 스택메모리에 저장된다
함수, 메서드도 스택메모리 쓴다.
a() 함수가 끝나야 다시 main() 으로 돌아감 a() 담았던 메모리는 자동으로 없어짐
깊이우선탐색
미로찾기

큐
한줄로 서는 선착순
먼저 들어온애가 가장 먼저 볼수있음
맨 앞부분 자료 꺼낼 수 있는 부분 front
자료 추가되는 부분 rear
자료는 rear 에서만 추가되고 front 에서만 꺼낼수있다
enqueue 자료 추가되는 오퍼레이션
dequeue 자료 꺼내지는 오퍼레이션

스택 큐 - array, 연결리스트로(노드)도 구현 가능